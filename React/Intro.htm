<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML>
<HEAD>
	<META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset=windows-1252">
	<TITLE></TITLE>
	<META NAME="GENERATOR" CONTENT="OpenOffice 4.1.11  (Win32)">
	<META NAME="CREATED" CONTENT="0;0">
	<META NAME="CHANGEDBY" CONTENT="Yaniv Mano">
	<META NAME="CHANGED" CONTENT="20221026;15230718">
	<META NAME="CHANGEDBY" CONTENT="Yaniv Mano">
	<STYLE TYPE="text/css">
	<!--
		PRE.cjk { font-family: "NSimSun", monospace }
		H2.cjk { font-family: "SimSun" }
		H2.ctl { font-family: "Lucida Sans" }
		CODE.cjk { font-family: "NSimSun", monospace }
	-->
	</STYLE>
</HEAD>
<BODY LANG="en-US" DIR="LTR">
<PRE CLASS="western" STYLE="margin-left: 1.16cm; margin-bottom: 0.5cm"><FONT COLOR="#080808"><U><FONT FACE="Consolas, monospace"><FONT SIZE=4><B>React Intro</B></U></FONT></FONT></FONT>
<FONT COLOR="#080808"><FONT FACE="Consolas, monospace"><FONT SIZE=2><SPAN LANG="en-US">npx create-react-app my-react-app </SPAN></FONT></FONT></FONT>
<CODE CLASS="western"><FONT COLOR="#080808"><FONT FACE="Consolas, monospace"><FONT SIZE=2><SPAN LANG="en-US">document.getElementById(&quot;demo&quot;).innerHTML</SPAN></FONT></FONT></FONT></CODE>
<A NAME="__DdeLink__0_152486775"></A><CODE CLASS="western"><FONT COLOR="#080808"><FONT FACE="Consolas, monospace"><FONT SIZE=2><SPAN LANG="en-US"><B>ES6 standards</B></SPAN></FONT></FONT></FONT></CODE></PRE>
<UL>
	<LI><PRE CLASS="western" STYLE="margin-bottom: 0.1cm; page-break-before: auto; page-break-after: auto"><CODE CLASS="western"><FONT COLOR="#080808"><FONT FACE="Consolas, monospace"><FONT SIZE=2><SPAN LANG="en-US"><B>array methods</B></SPAN></FONT></FONT></FONT></CODE></PRE>
</UL>
<PRE CLASS="western" STYLE="margin-left: 3.41cm; background: #dddddd; page-break-before: auto; page-break-after: auto"><CODE CLASS="western">const myArray = ['apple', 'banana', 'orange'];</CODE>
<CODE CLASS="western">const myList = myArray.map((item) =&gt; &lt;p&gt;{item}&lt;/p&gt;)</CODE>

<CODE CLASS="western">const vehicles = ['mustang', 'f-150', 'expedition'];</CODE>
<CODE CLASS="western">const [car, truck, suv] = vehicles;</CODE>

<CODE CLASS="western">const numbers = [1, 2, 3, 4, 5, 6];</CODE>
<CODE CLASS="western">const [one, two, ...rest] = numbers;</CODE></PRE>
<UL>
	<LI><PRE CLASS="western" STYLE="margin-top: 0.4cm; margin-bottom: 0.5cm; page-break-before: auto; page-break-after: auto"><CODE CLASS="western"><FONT COLOR="#080808"><FONT FACE="Consolas, monospace"><SPAN LANG="en-US"><B>arrow functions </B></SPAN></FONT></FONT></CODE></PRE>
</UL>
<UL>
	<LI><PRE CLASS="western" STYLE="margin-bottom: 0.5cm; background: #dddddd"><CODE CLASS="western">hello = function() {  return &quot;Hello World!&quot;;}</CODE></PRE>
	<LI><PRE CLASS="western" STYLE="margin-bottom: 0.5cm; background: #dddddd"><CODE CLASS="western">hello = () =&gt; {  return &quot;Hello World!&quot;;}</CODE></PRE>
	<LI><PRE CLASS="western" STYLE="margin-bottom: 0.5cm; background: #dddddd"><CODE CLASS="western">hello = () =&gt; &quot;Hello World!&quot;;</CODE></PRE>
	<LI><PRE CLASS="western" STYLE="margin-bottom: 0.5cm; background: #dddddd"><CODE CLASS="western">hello = (val) =&gt; &quot;Hello &quot; + val;</CODE></PRE>
	<LI><PRE CLASS="western" STYLE="margin-bottom: 0.5cm; background: #dddddd"><CODE CLASS="western">hello = val =&gt; &quot;Hello &quot; + val;</CODE></PRE>
</UL>
<PRE CLASS="western" STYLE="text-indent: 1.22cm; margin-bottom: 0.2cm"><CODE CLASS="western"><B>destructing</B></CODE>
<CODE CLASS="western">function calculate(a, b) {</CODE>
<CODE CLASS="western">  </CODE><CODE CLASS="western">const add = a + b;</CODE>
<CODE CLASS="western">  </CODE><CODE CLASS="western">const subtract = a - b;</CODE>
<CODE CLASS="western">  </CODE><CODE CLASS="western">const multiply = a * b;</CODE>
<CODE CLASS="western">  </CODE><CODE CLASS="western">const divide = a / b;</CODE>
<CODE CLASS="western">  </CODE><CODE CLASS="western">return [add, subtract, multiply, divide];</CODE>
<CODE CLASS="western">}</CODE>
<CODE CLASS="western">const [add, subtract, multiply, divide] = calculate(4, 7);</CODE>

<FONT COLOR="#080808"><FONT FACE="Consolas, monospace"><FONT SIZE=2><SPAN LANG="en-US"><B>spread operator</B></SPAN></FONT></FONT></FONT>
<CODE CLASS="western"><FONT COLOR="#080808"><FONT SIZE=2><SPAN LANG="en-US">const numbersOne = [1, 2, 3];</SPAN></FONT></FONT></CODE>
<CODE CLASS="western">const numbersTwo = [4, 5, 6];</CODE>
<CODE CLASS="western">const numbersCombined = [...numbersOne, ...numbersTwo];</CODE>

<FONT COLOR="#080808"><FONT FACE="Consolas, monospace"><FONT SIZE=2><SPAN LANG="en-US"><B>JSX </B></SPAN></FONT></FONT></FONT><CODE CLASS="western"><FONT COLOR="#080808"><FONT FACE="Consolas, monospace"><FONT SIZE=2><SPAN LANG="en-US"><B>standards</B></SPAN></FONT></FONT></FONT></CODE><FONT COLOR="#080808"><FONT FACE="Consolas, monospace"><FONT SIZE=2><SPAN LANG="en-US">  </SPAN></FONT></FONT></FONT></PRE>
<UL>
	<LI><PRE CLASS="western" STYLE="margin-bottom: 0.5cm; page-break-before: auto; page-break-after: auto"><FONT COLOR="#080808"><FONT FACE="Consolas, monospace"><FONT SIZE=2>allow writing html directly within javascript code ,  </FONT></FONT></FONT></PRE>
	<LI><PRE CLASS="western" STYLE="margin-bottom: 0.5cm"><FONT COLOR="#080808"><FONT FACE="Consolas, monospace"><FONT SIZE=2>allows code to be accessed with {}</FONT></FONT></FONT></PRE>
	<LI><PRE CLASS="western"><FONT COLOR="#080808"><FONT FACE="Consolas, monospace"><FONT SIZE=2>can only hold one tag at a time , so if needed to return few tags needs to wrap them with </FONT></FONT></FONT>
<FONT COLOR="#080808"><FONT FACE="Consolas, monospace"><FONT SIZE=2><SPAN LANG="en-US">&lt;div&gt;&lt;/div&gt;or simply &lt;&gt;&lt;p&gt;ONE&lt;/p&gt;&lt;p&gt;TWO&lt;/p&gt;&lt;/&gt;</SPAN></FONT></FONT></FONT></PRE>
	<LI><PRE CLASS="western" STYLE="margin-bottom: 0.5cm; page-break-before: auto; page-break-after: auto"><FONT COLOR="#080808"><FONT FACE="Consolas, monospace"><FONT SIZE=2>since JSX is rendered in javascript , can not use reserved keyword class so need to use className</FONT></FONT></FONT></PRE>
</UL>
<PRE CLASS="western" STYLE="margin-left: 1.16cm; margin-bottom: 0.5cm"><FONT COLOR="#080808"><FONT FACE="Consolas, monospace"><FONT SIZE=2><B>props</B> </FONT></FONT></FONT>
<CODE CLASS="western"><FONT COLOR="#080808"><FONT FACE="Consolas, monospace"><FONT SIZE=2><SPAN LANG="en-US">function </SPAN></FONT></FONT></FONT></CODE><CODE CLASS="western"><FONT COLOR="#080808"><FONT FACE="Consolas, monospace"><FONT SIZE=2><SPAN LANG="en-US"><B>Car</B></SPAN></FONT></FONT></FONT></CODE><CODE CLASS="western"><FONT COLOR="#080808"><FONT FACE="Consolas, monospace"><FONT SIZE=2><SPAN LANG="en-US">(props) {</SPAN></FONT></FONT></FONT></CODE>
<CODE CLASS="western"><FONT COLOR="#080808">  </FONT></CODE><CODE CLASS="western"><FONT COLOR="#080808"><FONT FACE="Consolas, monospace"><SPAN LANG="en-US">return &lt;h2&gt;I am a {props.</SPAN></FONT></FONT></CODE><CODE CLASS="western"><FONT COLOR="#800000"><FONT FACE="Consolas, monospace"><SPAN LANG="en-US">color</SPAN></FONT></FONT></CODE><CODE CLASS="western"><FONT COLOR="#080808"><FONT FACE="Consolas, monospace"><SPAN LANG="en-US">} Car!&lt;/h2&gt;;</SPAN></FONT></FONT></CODE>
<CODE CLASS="western"><FONT COLOR="#080808"><FONT FACE="Consolas, monospace"><SPAN LANG="en-US">}</SPAN></FONT></FONT></CODE>
<CODE CLASS="western"><FONT COLOR="#080808"><FONT FACE="Consolas, monospace"><SPAN LANG="en-US">const root = ReactDOM.createRoot(document.getElementById('root'));</SPAN></FONT></FONT></CODE>
<CODE CLASS="western"><FONT COLOR="#080808"><FONT FACE="Consolas, monospace"><SPAN LANG="en-US">root.render(&lt;</SPAN></FONT></FONT></CODE><CODE CLASS="western"><FONT COLOR="#080808"><FONT FACE="Consolas, monospace"><SPAN LANG="en-US"><B>Car</B></SPAN></FONT></FONT></CODE><CODE CLASS="western"><FONT COLOR="#080808"> </FONT></CODE><CODE CLASS="western"><FONT COLOR="#800000"><FONT FACE="Consolas, monospace"><SPAN LANG="en-US">color</SPAN></FONT></FONT></CODE><CODE CLASS="western"><FONT COLOR="#080808"><FONT FACE="Consolas, monospace"><SPAN LANG="en-US">=&quot;red&quot;/&gt;);</SPAN></FONT></FONT></CODE>

<CODE CLASS="western">c</CODE><CODE CLASS="western"><FONT COLOR="#080808"><FONT FACE="Consolas, monospace"><SPAN LANG="en-US">onst cars = ['red', 'blue', 'yellow'];</SPAN></FONT></FONT></CODE>
<CODE CLASS="western"><FONT COLOR="#080808"><FONT FACE="Consolas, monospace"><SPAN LANG="en-US">root.render(&lt; </SPAN></FONT></FONT></CODE><CODE CLASS="western"><FONT COLOR="#080808"><FONT FACE="Consolas, monospace"><SPAN LANG="en-US"><B>Car</B></SPAN></FONT></FONT></CODE><CODE CLASS="western"><FONT COLOR="#080808"> </FONT></CODE><CODE CLASS="western"><FONT COLOR="#080808"><FONT FACE="Consolas, monospace"><SPAN LANG="en-US">cars={cars} /&gt;);</SPAN></FONT></FONT></CODE>
</PRE><H2 CLASS="western" STYLE="margin-left: 1.16cm; margin-top: 0cm">
<FONT COLOR="#080808"><FONT FACE="Consolas, monospace"><FONT SIZE=2>React
Components</FONT></FONT></FONT></H2>
<PRE CLASS="western" STYLE="margin-left: 1.16cm; margin-bottom: 0.5cm"><FONT COLOR="#080808"><FONT FACE="Consolas, monospace"><FONT SIZE=2>Components are independent and reusable bits of code. They serve the same purpose as JavaScript functions, but work in isolation and return HTML via a render() function. </FONT></FONT></FONT>
<CODE CLASS="western"><FONT COLOR="#080808"><FONT FACE="Consolas, monospace"><SPAN LANG="en-US">class Car extends React.Component {</SPAN></FONT></FONT></CODE>
<CODE CLASS="western"><FONT COLOR="#080808">  </FONT></CODE><CODE CLASS="western"><FONT COLOR="#080808"><FONT FACE="Consolas, monospace"><SPAN LANG="en-US">render() {</SPAN></FONT></FONT></CODE>
<CODE CLASS="western"><FONT COLOR="#080808">    </FONT></CODE><CODE CLASS="western"><FONT COLOR="#080808"><FONT FACE="Consolas, monospace"><SPAN LANG="en-US">return &lt;h2&gt;Hi, I am a Car!&lt;/h2&gt;;</SPAN></FONT></FONT></CODE>
<CODE CLASS="western"><FONT COLOR="#080808">  </FONT></CODE><CODE CLASS="western"><FONT COLOR="#080808"><FONT FACE="Consolas, monospace"><SPAN LANG="en-US">}</SPAN></FONT></FONT></CODE>
<CODE CLASS="western"><FONT COLOR="#080808"><FONT FACE="Consolas, monospace"><SPAN LANG="en-US">}</SPAN></FONT></FONT></CODE>
<CODE CLASS="western"><FONT COLOR="#080808"><FONT FACE="Consolas, monospace"><SPAN LANG="en-US">const root = ReactDOM.createRoot(document.getElementById('root'));</SPAN></FONT></FONT></CODE>
<CODE CLASS="western"><FONT COLOR="#080808"><FONT FACE="Consolas, monospace"><SPAN LANG="en-US">root.render(&lt;Car /&gt;);</SPAN></FONT></FONT></CODE>

<CODE CLASS="western"><FONT COLOR="#080808"><FONT FACE="Consolas, monospace"><FONT SIZE=2><SPAN LANG="en-US"><B>state</B></SPAN></FONT></FONT></FONT></CODE><FONT COLOR="#080808"><FONT FACE="Consolas, monospace"><FONT SIZE=2><SPAN LANG="en-US"> </SPAN></FONT></FONT></FONT>
<FONT COLOR="#080808"><FONT FACE="Consolas, monospace"><FONT SIZE=2><SPAN LANG="en-US">Each component is assigned a state , the state could hold each value or a an array , changing the value of a state is with the function <B>this.setState</B></SPAN></FONT></FONT></FONT>
<CODE CLASS="western"><FONT COLOR="#080808"><FONT FACE="Consolas, monospace"><SPAN LANG="en-US">class Car extends React.Component {</SPAN></FONT></FONT></CODE>
<CODE CLASS="western"><FONT COLOR="#080808">  </FONT></CODE><CODE CLASS="western"><FONT COLOR="#080808"><FONT FACE="Consolas, monospace"><SPAN LANG="en-US">constructor(props) {</SPAN></FONT></FONT></CODE>
<CODE CLASS="western"><FONT COLOR="#080808">    </FONT></CODE><CODE CLASS="western"><FONT COLOR="#080808"><FONT FACE="Consolas, monospace"><SPAN LANG="en-US">super(props);</SPAN></FONT></FONT></CODE>
<CODE CLASS="western"><FONT COLOR="#080808">    </FONT></CODE><CODE CLASS="western"><FONT COLOR="#080808"><FONT FACE="Consolas, monospace"><SPAN LANG="en-US"><B>this.state</B></SPAN></FONT></FONT></CODE><CODE CLASS="western"><FONT COLOR="#080808"> </FONT></CODE><CODE CLASS="western"><FONT COLOR="#080808"><FONT FACE="Consolas, monospace"><SPAN LANG="en-US">= {</SPAN></FONT></FONT></CODE>
<CODE CLASS="western"><FONT COLOR="#080808">      </FONT></CODE><CODE CLASS="western"><FONT COLOR="#080808"><FONT FACE="Consolas, monospace"><SPAN LANG="en-US">brand: &quot;Ford&quot;,</SPAN></FONT></FONT></CODE>
<CODE CLASS="western"><FONT COLOR="#080808">      </FONT></CODE><CODE CLASS="western"><FONT COLOR="#080808"><FONT FACE="Consolas, monospace"><SPAN LANG="en-US">model: &quot;Mustang&quot;</SPAN></FONT></FONT></CODE>
<CODE CLASS="western"><FONT COLOR="#080808">    </FONT></CODE><CODE CLASS="western"><FONT COLOR="#080808"><FONT FACE="Consolas, monospace"><SPAN LANG="en-US">};</SPAN></FONT></FONT></CODE>
<CODE CLASS="western"><FONT COLOR="#080808">  </FONT></CODE><CODE CLASS="western"><FONT COLOR="#080808"><FONT FACE="Consolas, monospace"><SPAN LANG="en-US">}</SPAN></FONT></FONT></CODE>
<CODE CLASS="western"><FONT COLOR="#080808">  </FONT></CODE><CODE CLASS="western"><FONT COLOR="#080808"><FONT FACE="Consolas, monospace"><SPAN LANG="en-US">changeColor = () =&gt; {    </SPAN></FONT></FONT></CODE><CODE CLASS="western"><FONT COLOR="#080808"><FONT FACE="Consolas, monospace"><SPAN LANG="en-US"><B>this.setState</B></SPAN></FONT></FONT></CODE><CODE CLASS="western"><FONT COLOR="#080808"><FONT FACE="Consolas, monospace"><SPAN LANG="en-US">({color: &quot;blue&quot;});  }</SPAN></FONT></FONT></CODE>
<CODE CLASS="western"><FONT COLOR="#080808">  </FONT></CODE><CODE CLASS="western"><FONT COLOR="#080808"><FONT FACE="Consolas, monospace"><SPAN LANG="en-US">render() {&lt;p&gt;It is a {</SPAN></FONT></FONT></CODE><CODE CLASS="western"><FONT COLOR="#080808"><FONT FACE="Consolas, monospace"><SPAN LANG="en-US"><B>this.state</B></SPAN></FONT></FONT></CODE><CODE CLASS="western"><FONT COLOR="#080808"><FONT FACE="Consolas, monospace"><SPAN LANG="en-US">.color} {</SPAN></FONT></FONT></CODE><CODE CLASS="western"><FONT COLOR="#080808"><FONT FACE="Consolas, monospace"><SPAN LANG="en-US"><B>this.state</B></SPAN></FONT></FONT></CODE><CODE CLASS="western"><FONT COLOR="#080808"><FONT FACE="Consolas, monospace"><SPAN LANG="en-US">.model} from {</SPAN></FONT></FONT></CODE><CODE CLASS="western"><FONT COLOR="#080808"><FONT FACE="Consolas, monospace"><SPAN LANG="en-US"><B>this.state</B></SPAN></FONT></FONT></CODE><CODE CLASS="western"><FONT COLOR="#080808"><FONT FACE="Consolas, monospace"><SPAN LANG="en-US">.year}.&lt;/p&gt; );  }</SPAN></FONT></FONT></CODE>
<CODE CLASS="western"><FONT COLOR="#080808"><FONT FACE="Consolas, monospace"><SPAN LANG="en-US">}</SPAN></FONT></FONT></CODE>

<FONT COLOR="#080808"><FONT FACE="Consolas, monospace"><FONT SIZE=2><SPAN LANG="en-US"><B>Built in functions to react class</B></SPAN></FONT></FONT></FONT></PRE><P STYLE="margin-left: 1.91cm; page-break-before: auto; page-break-after: auto">
<FONT COLOR="#080808"><FONT FACE="Consolas, monospace"><FONT SIZE=2>React
has built-in methods that gets called , only render is mandatory:</FONT></FONT></FONT></P>
<OL>
	<LI><PRE CLASS="western" STYLE="margin-bottom: 0.5cm; background: #ffffff"><CODE CLASS="western"><FONT COLOR="#080808"><FONT FACE="Consolas, monospace"><SPAN LANG="en-US">constructor()               - called before anything else, initial </SPAN></FONT></FONT></CODE><CODE CLASS="western"><FONT COLOR="#080808"><SPAN LANG="en-US">state</SPAN></FONT></CODE><CODE CLASS="western"><FONT COLOR="#080808"> </FONT></CODE><CODE CLASS="western"><FONT COLOR="#080808"><FONT FACE="Consolas, monospace"><SPAN LANG="en-US">and other initial values  , gets prop as argument</SPAN></FONT></FONT></CODE></PRE>
	<LI><PRE CLASS="western" STYLE="margin-bottom: 0.5cm; background: #ffffff"><CODE CLASS="western"><FONT COLOR="#080808"><FONT FACE="Consolas, monospace"><SPAN LANG="en-US">getDerivedStateFromProps(props, state)  - called before rendering the element, gets state and props as arguments , return object with a change state </SPAN></FONT></FONT></CODE></PRE>
	<OL>
		<PRE CLASS="western" STYLE="margin-top: 0.2cm; margin-bottom: 0.5cm; background: #dddddd; page-break-before: auto; page-break-after: auto"><CODE CLASS="western"><FONT COLOR="#080808"><FONT FACE="Consolas, monospace"><SPAN LANG="en-US">static getDerivedStateFromProps(props, state) {    return {favoritecolor: props.favcol };  }  // the facoritecolor would be assigned to the state!!</SPAN></FONT></FONT></CODE></PRE>
	</OL>
	<LI><PRE CLASS="western" STYLE="margin-bottom: 0.5cm; background: #ffffff"><CODE CLASS="western"><FONT COLOR="#080808"><FONT FACE="Consolas, monospace"><SPAN LANG="en-US">render()                   - method is required, and is the method that actually outputs the HTML to the DOM. </SPAN></FONT></FONT></CODE></PRE>
	<LI><PRE CLASS="western" STYLE="margin-bottom: 0.5cm; background: #ffffff"><CODE CLASS="western"><FONT COLOR="#080808"><FONT FACE="Consolas, monospace"><SPAN LANG="en-US">ComponentDidMount()        - method is called after the component is rendered  </SPAN></FONT></FONT></CODE></PRE>
	<LI><PRE CLASS="western" STYLE="margin-bottom: 0.5cm; background: #ffffff"><CODE CLASS="western"><FONT COLOR="#080808"><SPAN LANG="en-US">componentDidUpdate()</SPAN></FONT></CODE><CODE CLASS="western"><FONT COLOR="#080808">    </FONT></CODE><CODE CLASS="western"><FONT COLOR="#080808"><FONT FACE="Consolas, monospace"><SPAN LANG="en-US">- method is called whenever change is made to state or props</SPAN></FONT></FONT></CODE></PRE>
	<LI><PRE CLASS="western" STYLE="margin-bottom: 0.5cm; background: #ffffff"><CODE CLASS="western"><FONT COLOR="#080808"><SPAN LANG="en-US">getDerivedStateFromProps(props, state)  - </SPAN></FONT></CODE><CODE CLASS="western"><FONT COLOR="#080808"><FONT FACE="Consolas, monospace"><SPAN LANG="en-US">method is called whenever change is made to state or props , like getDerivedStateFromProps returns new state value</SPAN></FONT></FONT></CODE></PRE>
	<LI><PRE CLASS="western" STYLE="margin-bottom: 0.5cm; background: #ffffff"><CODE CLASS="western"><FONT COLOR="#080808"><SPAN LANG="en-US">shouldComponentUpdate() - returns boolean, if false the component would not render if changes to variable occur  </SPAN></FONT></CODE></PRE>
	<LI><PRE CLASS="western" STYLE="margin-bottom: 0.5cm; background: #ffffff"><CODE CLASS="western"><FONT COLOR="#080808"><SPAN LANG="en-US">getSnapshotBeforeUpdate(prevProps, prevState) - </SPAN></FONT></CODE><CODE CLASS="western"><FONT COLOR="#080808"><FONT FACE="Consolas, monospace"><SPAN LANG="en-US">method is called whenever change is made to state or props, gets the previous value before the change</SPAN></FONT></FONT></CODE></PRE>
	<LI><PRE CLASS="western" STYLE="margin-bottom: 0.5cm; background: #ffffff"><CODE CLASS="western">componentDidUpdate</CODE>     - called after dom changes is made</PRE>
	<LI><PRE CLASS="western" STYLE="background: #ffffff"><CODE CLASS="western">componentWillUnmount</CODE>  - called after component is removed from dom 

<CODE CLASS="western"><FONT COLOR="#080808"><FONT FACE="Consolas, monospace"><SPAN LANG="en-US"><B>Events</B></SPAN></FONT></FONT></CODE></PRE>
</OL>
<PRE CLASS="western" STYLE="margin-left: 2.14cm; background: #dddddd"><CODE CLASS="western"><FONT COLOR="#080808"><FONT FACE="Consolas, monospace"><FONT SIZE=2><SPAN LANG="en-US">HTML  - </SPAN></FONT></FONT></FONT></CODE><CODE CLASS="western"><FONT COLOR="#080808"><FONT FACE="Consolas, monospace"><SPAN LANG="en-US">&lt;button onclick=&quot;shoot()&quot;&gt;Take the Shot!&lt;/button&gt;</SPAN></FONT></FONT></CODE>
<CODE CLASS="western"><FONT COLOR="#080808"><FONT FACE="Consolas, monospace"><FONT SIZE=2><SPAN LANG="en-US">React - </SPAN></FONT></FONT></FONT></CODE><CODE CLASS="western"><FONT COLOR="#080808"><FONT FACE="Consolas, monospace"><SPAN LANG="en-US">&lt;button onClick={shoot}  &gt;Take the Shot!&lt;/button&gt;</SPAN></FONT></FONT></CODE>
<CODE CLASS="western"><FONT COLOR="#080808"><FONT FACE="Consolas, monospace"><SPAN LANG="en-US">&lt;button onClick={() =&gt; shoot(&quot;Goal!&quot;)}&gt;Take the shot!&lt;/button&gt;</SPAN></FONT></FONT></CODE></PRE><P STYLE="margin-left: 2.12cm; margin-bottom: 0cm">
<BR>
</P>
<P STYLE="margin-left: 2.12cm; margin-bottom: 0cm"><BR>
</P>
<OL START=10>
	<PRE CLASS="western" STYLE="margin-bottom: 0.5cm"><CODE CLASS="western"><FONT COLOR="#080808"><FONT FACE="Consolas, monospace"><SPAN LANG="en-US"><B>dom operands </B></SPAN></FONT></FONT></CODE></PRE>
</OL>
<P STYLE="margin-left: 2.12cm; margin-bottom: 0cm"><FONT COLOR="#080808"><FONT FACE="Consolas, monospace"><FONT SIZE=2><SPAN LANG="en-US">&amp;&amp;
- </SPAN></FONT></FONT></FONT><CODE CLASS="western"><FONT COLOR="#080808"><FONT SIZE=2><SPAN LANG="en-US">{condition
&amp;&amp;</SPAN></FONT></FONT></CODE><CODE CLASS="western"> </CODE><CODE CLASS="western"><FONT COLOR="#080808"><FONT SIZE=2><SPAN LANG="en-US">&lt;h2&gt;
hello &lt;/h2&gt; } - if condition true, show element</SPAN></FONT></FONT></CODE></P>
<P STYLE="margin-left: 2.12cm; margin-bottom: 0cm"><CODE CLASS="western"><FONT COLOR="#080808"><FONT SIZE=2><SPAN LANG="en-US">?
: </SPAN></FONT></FONT></CODE><CODE CLASS="western"><FONT COLOR="#080808"><FONT FACE="Consolas, monospace"><FONT SIZE=2><SPAN LANG="en-US">-
</SPAN></FONT></FONT></FONT></CODE><CODE CLASS="western"><FONT COLOR="#080808"><FONT SIZE=2><SPAN LANG="en-US">{condition
? &lt;h2&gt; hello &lt;/h2&gt; : &lt;h2&gt; bye bye &lt;/h2&gt;} </SPAN></FONT></FONT></CODE>
</P>
<P STYLE="margin-left: 2.12cm; margin-bottom: 0cm"><CODE CLASS="western"><FONT COLOR="#080808"><FONT SIZE=2><SPAN LANG="en-US">||
- {condition || &ldquo;&rdquo;} - if undefined print &ldquo;&rdquo;</SPAN></FONT></FONT></CODE></P>
<PRE CLASS="western" STYLE="margin-bottom: 0.5cm"><CODE CLASS="western">     </CODE></PRE>
<OL START=10>
	<PRE CLASS="western" STYLE="margin-bottom: 0.5cm"><CODE CLASS="western"><FONT COLOR="#080808"><FONT FACE="Consolas, monospace"><SPAN LANG="en-US"><B>form</B></SPAN></FONT></FONT></CODE></PRE>
</OL>
<PRE CLASS="western" STYLE="margin-left: 2.2cm; background: #dddddd; page-break-before: auto; page-break-after: auto"><CODE CLASS="western"><FONT COLOR="#080808"><FONT FACE="Consolas, monospace"><SPAN LANG="en-US">&lt;form onSubmit={handleSubmit}&gt;        - form onSubmit assigns handler</SPAN></FONT></FONT></CODE>

<CODE CLASS="western"><FONT COLOR="#080808"><FONT FACE="Consolas, monospace"><SPAN LANG="en-US">const handleSubmit = (event) =&gt; {     - onSubmit handler declaration  , receives event </SPAN></FONT></FONT></CODE>
<CODE CLASS="western"><FONT COLOR="#080808"><FONT FACE="Consolas, monospace"><SPAN LANG="en-US">event.preventDefault();               - disable onSubmit so that would not occur twice ..   </SPAN></FONT></FONT></CODE>
<CODE CLASS="western"><FONT COLOR="#080808"><FONT FACE="Consolas, monospace"><SPAN LANG="en-US">...        </SPAN></FONT></FONT></CODE>
<CODE CLASS="western"><FONT COLOR="#080808"><FONT FACE="Consolas, monospace"><SPAN LANG="en-US">}</SPAN></FONT></FONT></CODE>

<CODE CLASS="western">&lt;</CODE><CODE CLASS="western"><FONT COLOR="#080808"><FONT FACE="Consolas, monospace"><SPAN LANG="en-US">input type=&quot;number&quot; name=&quot;age&quot; value={inputs.age || &quot;&quot;} </SPAN></FONT></FONT></CODE><CODE CLASS="western"><FONT COLOR="#080808"><FONT FACE="Consolas, monospace"><SPAN LANG="en-US"><B>onChange</B></SPAN></FONT></FONT></CODE><CODE CLASS="western"><FONT COLOR="#080808"><FONT FACE="Consolas, monospace"><SPAN LANG="en-US">={handleChange}/&gt;  - input with value field and onChange event assigned to handleChange</SPAN></FONT></FONT></CODE>

<CODE CLASS="western"><FONT COLOR="#080808"><FONT FACE="Consolas, monospace"><SPAN LANG="en-US">const handleChange = (event) =&gt; {                                         - handleChange gets event  </SPAN></FONT></FONT></CODE>
<CODE CLASS="western"><FONT COLOR="#080808">    </FONT></CODE><CODE CLASS="western"><FONT COLOR="#080808"><FONT FACE="Consolas, monospace"><SPAN LANG="en-US">const name = event.target.name;                                       - access field name , get value</SPAN></FONT></FONT></CODE>
<CODE CLASS="western"><FONT COLOR="#080808">    </FONT></CODE><CODE CLASS="western"><FONT COLOR="#080808"><FONT FACE="Consolas, monospace"><SPAN LANG="en-US">const value = event.target.value;                                     - access field value , get value</SPAN></FONT></FONT></CODE>

<CODE CLASS="western"><FONT COLOR="#080808"><FONT FACE="Consolas, monospace"><SPAN LANG="en-US">}</SPAN></FONT></FONT></CODE>

<CODE CLASS="western">&lt;s</CODE><CODE CLASS="western"><FONT COLOR="#080808"><FONT FACE="Consolas, monospace"><SPAN LANG="en-US">elect value={myCar} onChange={handleChange}&gt;                                  - select in react gets the selected value in value field , handleChange acts the same </SPAN></FONT></FONT></CODE>
<CODE CLASS="western"><FONT COLOR="#080808">        </FONT></CODE><CODE CLASS="western"><FONT COLOR="#080808"><FONT FACE="Consolas, monospace"><SPAN LANG="en-US">&lt;option value=&quot;Ford&quot;&gt;Ford&lt;/option&gt;</SPAN></FONT></FONT></CODE>
<CODE CLASS="western"><FONT COLOR="#080808">        </FONT></CODE><CODE CLASS="western"><FONT COLOR="#080808"><FONT FACE="Consolas, monospace"><SPAN LANG="en-US">&lt;option value=&quot;Volvo&quot;&gt;Volvo&lt;/option&gt;                                    - in HTML the selected would appear to mark the selected , </SPAN></FONT></FONT></CODE><CODE CLASS="western"><FONT COLOR="#080808"><FONT FACE="Consolas, monospace"><SPAN LANG="en-US"><B>but not in react</B></SPAN></FONT></FONT></CODE>
<CODE CLASS="western"><FONT COLOR="#080808">        </FONT></CODE><CODE CLASS="western"><FONT COLOR="#080808"><FONT FACE="Consolas, monospace"><SPAN LANG="en-US">&lt;option value=&quot;Fiat&quot;&gt;Fiat&lt;/option&gt;</SPAN></FONT></FONT></CODE>
<CODE CLASS="western"><FONT COLOR="#080808">      </FONT></CODE><CODE CLASS="western"><FONT COLOR="#080808"><FONT FACE="Consolas, monospace"><SPAN LANG="en-US">&lt;/select&gt;</SPAN></FONT></FONT></CODE></PRE>
<OL START=10>
	<PRE CLASS="western" STYLE="margin-bottom: 0.5cm"><CODE CLASS="western"><FONT COLOR="#080808"><FONT FACE="Consolas, monospace"><SPAN LANG="en-US"><B>styling</B></SPAN></FONT></FONT></CODE><CODE CLASS="western"> </CODE></PRE>
</OL>
<PRE CLASS="western" STYLE="margin-left: 2.2cm; background: #dddddd"><CODE CLASS="western">&lt;h1 style={{bac</CODE><CODE CLASS="western"><FONT COLOR="#080808"><FONT FACE="Consolas, monospace"><SPAN LANG="en-US">kground</SPAN></FONT></FONT></CODE><CODE CLASS="western">Color: &quot;lightblue&quot;}}&gt;Hello &lt;/h1&gt;          &ndash; unlike css , the property should be cased in {{}} and in camel case , not hyphen separators (background-color)</CODE>

<CODE CLASS="western">con</CODE><CODE CLASS="western"><FONT COLOR="#080808"><FONT FACE="Consolas, monospace"><SPAN LANG="en-US">st myStyle = {    color: &quot;white&quot;,    backgroundColor: &quot;green&quot;  };    -  can set object as style</SPAN></FONT></FONT></CODE>
<CODE CLASS="western"><FONT COLOR="#080808"><FONT FACE="Consolas, monospace"><SPAN LANG="en-US">&lt;h1 style={mySty</SPAN></FONT></FONT></CODE><CODE CLASS="western">le}&gt;Hello Style!&lt;/h1&gt;</CODE>

<CODE CLASS="western">import './App.css';                             - import css file will apply on general tags (p , div )</CODE>
<CODE CLASS="western"> </CODE><CODE CLASS="western">&lt;h1 className={App.bigblue}&gt;Hello Car!&lt;/h1&gt;;   - use className to uses classes from imported css file </CODE></PRE>
<OL START=10>
	<PRE CLASS="western" STYLE="margin-bottom: 0.5cm"><CODE CLASS="western"><FONT COLOR="#080808"><FONT FACE="Consolas, monospace"><SPAN LANG="en-US"><B>Hook</B></SPAN></FONT></FONT></CODE></PRE>
</OL>
<PRE CLASS="western" STYLE="margin-left: 2.12cm; margin-bottom: 0.5cm; page-break-before: auto; page-break-after: auto"><CODE CLASS="western"><FONT COLOR="#080808"><FONT FACE="Consolas, monospace"><FONT SIZE=2><B>useState hook</B></FONT></FONT></FONT></CODE><CODE CLASS="western"><FONT COLOR="#080808"><FONT FACE="Consolas, monospace"><FONT SIZE=2> </FONT></FONT></FONT></CODE></PRE>
<UL>
	<LI><PRE CLASS="western" STYLE="margin-bottom: 0.5cm"><CODE CLASS="western"><FONT COLOR="#080808"><FONT FACE="Consolas, monospace"><FONT SIZE=2>to be used in functions only.</FONT></FONT></FONT></CODE></PRE>
	<LI><PRE CLASS="western" STYLE="margin-bottom: 0.5cm"><CODE CLASS="western"><FONT COLOR="#080808"><FONT FACE="Consolas, monospace"><FONT SIZE=2>Allows using more than one state </FONT></FONT></FONT></CODE></PRE>
</UL>
<PRE CLASS="western" STYLE="margin-left: 1.16cm"><CODE CLASS="western">const [state, setFunc] = useState(initialValue);</CODE>
<CODE CLASS="western"><FONT COLOR="#080808"><FONT FACE="Consolas, monospace"><FONT SIZE=2><SPAN LANG="en-US">useState(initialValue) &ndash; this function gets the initial value for the state and returns 2 values</SPAN></FONT></FONT></FONT></CODE></PRE>
<OL>
	<LI><PRE CLASS="western" STYLE="margin-bottom: 0.5cm; page-break-before: auto; page-break-after: auto"><CODE CLASS="western"><FONT COLOR="#080808"><FONT FACE="Consolas, monospace"><FONT SIZE=2>state               &ndash; the current state </FONT></FONT></FONT></CODE></PRE>
	<LI><PRE CLASS="western" STYLE="margin-bottom: 0.5cm"><CODE CLASS="western"><FONT COLOR="#080808"><FONT FACE="Consolas, monospace"><FONT SIZE=2>setFunc             - the function for setting the this state (in staid of setState function )</FONT></FONT></FONT></CODE></PRE>
</OL>
<PRE CLASS="western" STYLE="margin-left: 2.12cm; margin-bottom: 0.5cm; page-break-before: auto; page-break-after: auto"><CODE CLASS="western"><FONT COLOR="#080808"><SPAN LANG="en-US"><B>useE</B></SPAN></FONT></CODE><CODE CLASS="western"><FONT COLOR="#080808"><FONT FACE="Consolas, monospace"><SPAN LANG="en-US"><B>ffe</B></SPAN></FONT></FONT></CODE><CODE CLASS="western"><FONT COLOR="#080808"><SPAN LANG="en-US"><B>ct (* need more info)</B></SPAN></FONT></CODE></PRE>
<UL>
	<LI><PRE CLASS="western" STYLE="margin-bottom: 0.5cm"><CODE CLASS="western"><FONT COLOR="#080808"><FONT SIZE=2><SPAN LANG="en-US"><SPAN STYLE="font-weight: normal">Hook allows you to perform side effects in your components </SPAN></SPAN></FONT></FONT></CODE></PRE>
	<LI><PRE CLASS="western" STYLE="margin-bottom: 0.5cm"><CODE CLASS="western"><FONT COLOR="#080808"><FONT SIZE=2><SPAN LANG="en-US"><SPAN STYLE="font-weight: normal">useEffect should cleanup the objects it created at the end of it in order to prevent memory leak</SPAN></SPAN></FONT></FONT></CODE></PRE>
	<LI><PRE CLASS="western"><CODE CLASS="western"><FONT COLOR="#080808"><FONT SIZE=2><SPAN LANG="en-US"><SPAN STYLE="font-weight: normal">when ever useEffect is triggered , the () segment would be performed </SPAN></SPAN></FONT></FONT></CODE>
<CODE CLASS="western"><FONT COLOR="#080808"><FONT SIZE=2><SPAN LANG="en-US"><SPAN STYLE="font-weight: normal">useEffect(() =&gt; {</SPAN></SPAN></FONT></FONT></CODE><CODE CLASS="western">});                    //Runs on every render</CODE>
<CODE CLASS="western"><FONT COLOR="#080808"><FONT SIZE=2><SPAN LANG="en-US"><SPAN STYLE="font-weight: normal">useEffect(() =&gt; {</SPAN></SPAN></FONT></FONT></CODE><CODE CLASS="western">}, []);                // if gets empty array runs only on first render </CODE>
<CODE CLASS="western"><FONT COLOR="#080808"><FONT SIZE=2><SPAN LANG="en-US"><SPAN STYLE="font-weight: normal">useEffect(() =&gt; {</SPAN></SPAN></FONT></FONT></CODE><CODE CLASS="western">}, [prop, state]);     // if gets prop or state runs only on first render and every time the value changes</CODE></PRE>
</UL>
<PRE CLASS="western" STYLE="margin-bottom: 0.5cm">
<CODE CLASS="western"><FONT COLOR="#080808"><SPAN LANG="en-US"><B>useContext</B></SPAN></FONT></CODE> 
allows using the useState hook globally  , thus the root component holds the state and all children could access it directly .. 
<CODE CLASS="western">import { useState, createContext, useContext } from &quot;react&quot;;   - importing the hooks</CODE>
<CODE CLASS="western">const [user, setUser] = useState(&quot;Jesse Hall&quot;);               - create useState </CODE>
<CODE CLASS="western">&lt;UserContext.Provider value={user}&gt; - in the return of the function assign the useState we created to useContext provider</CODE>
<CODE CLASS="western">const user = useContext(UserContext);  - add to any function to access the useState directly</CODE>
<CODE CLASS="western"><B>u</B></CODE><CODE CLASS="western"><FONT COLOR="#080808"><SPAN LANG="en-US"><B>se</B></SPAN></FONT></CODE><CODE CLASS="western"><B>Ref</B></CODE>
<A NAME="__DdeLink__1_1275113991"></A><CODE CLASS="western"><SPAN STYLE="font-weight: normal">const count = useRef(0);          - allows tracking useState without cuasing re rendering </SPAN></CODE>
<CODE CLASS="western"> </CODE><CODE CLASS="western"><SPAN STYLE="font-weight: normal">const inputElement = useRef();   - allows accessing dom elements </SPAN></CODE>
<CODE CLASS="western"><SPAN STYLE="font-weight: normal">const previousInputValue = useRef(&quot;&quot;);  - allows tracking state changes </SPAN></CODE>
<CODE CLASS="western"><B>us</B></CODE><CODE CLASS="western"><B>eReducer</B></CODE>
<CODE CLASS="western"><SPAN STYLE="font-weight: normal">a more complex useState, instead of setter, we have dispatcher that dispatches a function that is located in reducer .. </SPAN></CODE>
<A NAME="__DdeLink__3_1275113991"></A><CODE CLASS="western"><SPAN STYLE="font-weight: normal">const [</SPAN></CODE><CODE CLASS="western"><SPAN STYLE="font-weight: normal"><SPAN STYLE="background: #ffcc00">todos</SPAN></SPAN></CODE><CODE CLASS="western"><SPAN STYLE="font-weight: normal">, </SPAN></CODE><CODE CLASS="western"><SPAN STYLE="font-weight: normal"><SPAN STYLE="background: #66ccff">dispatch</SPAN></SPAN></CODE><CODE CLASS="western"><SPAN STYLE="font-weight: normal">] = useReducer(</SPAN></CODE><CODE CLASS="western"><SPAN STYLE="font-weight: normal"><SPAN STYLE="background: #33ff99">reducer</SPAN></SPAN></CODE><CODE CLASS="western"><SPAN STYLE="font-weight: normal">, </SPAN></CODE><CODE CLASS="western"><SPAN STYLE="font-weight: normal"><SPAN STYLE="background: #ffff00">initialTodos</SPAN></SPAN></CODE><CODE CLASS="western"><SPAN STYLE="font-weight: normal">);</SPAN></CODE>
<CODE CLASS="western"><SPAN STYLE="font-weight: normal">const </SPAN></CODE><CODE CLASS="western"><SPAN STYLE="font-weight: normal"><SPAN STYLE="background: #ffff00">initialTodos</SPAN></SPAN></CODE><CODE CLASS="western"><SPAN STYLE="font-weight: normal"> = [  {    id: 1,    title: &quot;Todo 1&quot;,    complete: false,  },    -  object accepted by reducer as initial value</SPAN></CODE>
<CODE CLASS="western">                       </CODE><CODE CLASS="western"><SPAN STYLE="font-weight: normal">{    id: 2,    title: &quot;Todo 2&quot;,    complete: false,  },];</SPAN></CODE>

<CODE CLASS="western"><SPAN STYLE="font-weight: normal"><SPAN STYLE="background: transparent">const </SPAN></SPAN></CODE><CODE CLASS="western"><SPAN STYLE="font-weight: normal"><SPAN STYLE="background: #33ff99">reducer</SPAN></SPAN></CODE><CODE CLASS="western"><SPAN STYLE="font-weight: normal"><SPAN STYLE="background: transparent"> = (state, action) =&gt; {                                               - function to be dispatched with the   </SPAN></SPAN></CODE><CODE CLASS="western"><SPAN STYLE="font-weight: normal"><SPAN STYLE="background: #66ccff">dispatch</SPAN></SPAN></CODE>
<CODE CLASS="western"><SPAN STYLE="background: transparent">  </SPAN></CODE><CODE CLASS="western"><SPAN STYLE="font-weight: normal"><SPAN STYLE="background: transparent">switch (action.type) {</SPAN></SPAN></CODE>
<CODE CLASS="western"><SPAN STYLE="background: transparent">    </SPAN></CODE><CODE CLASS="western"><SPAN STYLE="font-weight: normal"><SPAN STYLE="background: transparent">case &quot;COMPLETE&quot;:</SPAN></SPAN></CODE>
<CODE CLASS="western"><SPAN STYLE="background: transparent">      </SPAN></CODE><CODE CLASS="western"><SPAN STYLE="font-weight: normal"><SPAN STYLE="background: transparent">return state.map((todo) =&gt; {</SPAN></SPAN></CODE>
<CODE CLASS="western"><SPAN STYLE="background: transparent">        </SPAN></CODE><CODE CLASS="western"><SPAN STYLE="font-weight: normal"><SPAN STYLE="background: transparent">if (todo.id === action.id) {</SPAN></SPAN></CODE>
<CODE CLASS="western"><SPAN STYLE="background: transparent">          </SPAN></CODE><CODE CLASS="western"><SPAN STYLE="font-weight: normal"><SPAN STYLE="background: transparent">return { ...todo, complete: !todo.complete };</SPAN></SPAN></CODE>
<CODE CLASS="western"><SPAN STYLE="background: transparent">        </SPAN></CODE><CODE CLASS="western"><SPAN STYLE="font-weight: normal"><SPAN STYLE="background: transparent">} else {          return todo;        }      });</SPAN></SPAN></CODE>
<CODE CLASS="western"><SPAN STYLE="background: transparent">    </SPAN></CODE><CODE CLASS="western"><SPAN STYLE="font-weight: normal"><SPAN STYLE="background: transparent">default:</SPAN></SPAN></CODE>
<CODE CLASS="western"><SPAN STYLE="background: transparent">      </SPAN></CODE><CODE CLASS="western"><SPAN STYLE="font-weight: normal"><SPAN STYLE="background: transparent">return state;</SPAN></SPAN></CODE>
<CODE CLASS="western"><SPAN STYLE="background: transparent">  </SPAN></CODE><CODE CLASS="western"><SPAN STYLE="font-weight: normal"><SPAN STYLE="background: transparent">}};</SPAN></SPAN></CODE>

<CODE CLASS="western"><FONT COLOR="#080808"><SPAN LANG="en-US"><SPAN STYLE="font-weight: normal"><SPAN STYLE="background: #66ccff">dispatch</SPAN></SPAN></SPAN></FONT></CODE><CODE CLASS="western"><FONT COLOR="#080808"><SPAN LANG="en-US"><SPAN STYLE="font-weight: normal"><SPAN STYLE="background: transparent">({ type: &quot;COMPLETE&quot;, id: todo.id });   - running the function declared in </SPAN></SPAN></SPAN></FONT></CODE><CODE CLASS="western"><FONT COLOR="#080808"><SPAN LANG="en-US"><SPAN STYLE="font-weight: normal"><SPAN STYLE="background: #33ff99">reducer</SPAN></SPAN></SPAN></FONT></CODE>

 <CODE CLASS="western"><SPAN STYLE="font-weight: normal"><SPAN STYLE="background: transparent">return (</SPAN></SPAN></CODE>
<CODE CLASS="western"><SPAN STYLE="background: transparent">    </SPAN></CODE><CODE CLASS="western"><SPAN STYLE="font-weight: normal"><SPAN STYLE="background: transparent">&lt;&gt;</SPAN></SPAN></CODE>
<CODE CLASS="western"><SPAN STYLE="background: transparent">      </SPAN></CODE><CODE CLASS="western"><SPAN STYLE="font-weight: normal"><SPAN STYLE="background: transparent">{</SPAN></SPAN></CODE><CODE CLASS="western"><SPAN STYLE="font-weight: normal"><SPAN STYLE="background: #ffcc00">todos</SPAN></SPAN></CODE><CODE CLASS="western"><SPAN STYLE="font-weight: normal"><SPAN STYLE="background: transparent">.map((todo) =&gt; (                         - the </SPAN></SPAN></CODE><CODE CLASS="western"><SPAN STYLE="font-weight: normal"><SPAN STYLE="background: #ffcc00">todos</SPAN></SPAN></CODE><CODE CLASS="western"><SPAN STYLE="font-weight: normal"><SPAN STYLE="background: transparent"> object is object same as the state from the useState</SPAN></SPAN></CODE>
<CODE CLASS="western"><SPAN STYLE="background: transparent">        </SPAN></CODE><CODE CLASS="western"><SPAN STYLE="font-weight: normal"><SPAN STYLE="background: transparent">&lt;div key={todo.id}&gt;</SPAN></SPAN></CODE>
<CODE CLASS="western"><SPAN STYLE="background: transparent">          </SPAN></CODE><CODE CLASS="western"><SPAN STYLE="font-weight: normal"><SPAN STYLE="background: transparent">&lt;label&gt;</SPAN></SPAN></CODE>
<CODE CLASS="western"><SPAN STYLE="background: transparent">            </SPAN></CODE><CODE CLASS="western"><SPAN STYLE="font-weight: normal"><SPAN STYLE="background: transparent">&lt;input</SPAN></SPAN></CODE>
<CODE CLASS="western"><SPAN STYLE="background: transparent">              </SPAN></CODE><CODE CLASS="western"><SPAN STYLE="font-weight: normal"><SPAN STYLE="background: transparent">type=&quot;checkbox&quot;</SPAN></SPAN></CODE>
<CODE CLASS="western"><SPAN STYLE="background: transparent">              </SPAN></CODE><CODE CLASS="western"><SPAN STYLE="font-weight: normal"><SPAN STYLE="background: transparent">checked={todo.complete}</SPAN></SPAN></CODE>
<A NAME="__DdeLink__5_1275113991"></A><CODE CLASS="western"><SPAN STYLE="background: transparent">              </SPAN></CODE><CODE CLASS="western"><SPAN STYLE="font-weight: normal"><SPAN STYLE="background: transparent">onChange={() =&gt; handleComplete(todo)}   - the  handleComplete should trigger the </SPAN></SPAN></CODE><CODE CLASS="western"><SPAN STYLE="font-weight: normal"><SPAN STYLE="background: #66ccff">dispatch</SPAN></SPAN></CODE>
<CODE CLASS="western"><SPAN STYLE="background: transparent">            </SPAN></CODE><CODE CLASS="western"><SPAN STYLE="font-weight: normal"><SPAN STYLE="background: transparent">/&gt;</SPAN></SPAN></CODE>
<CODE CLASS="western"><SPAN STYLE="background: transparent">            </SPAN></CODE><CODE CLASS="western"><SPAN STYLE="font-weight: normal"><SPAN STYLE="background: transparent">{todo.title}</SPAN></SPAN></CODE>
<CODE CLASS="western"><SPAN STYLE="background: transparent">          </SPAN></CODE><CODE CLASS="western"><SPAN STYLE="font-weight: normal"><SPAN STYLE="background: transparent">&lt;/label&gt;</SPAN></SPAN></CODE>
<CODE CLASS="western"><SPAN STYLE="background: transparent">        </SPAN></CODE><CODE CLASS="western"><SPAN STYLE="font-weight: normal"><SPAN STYLE="background: transparent">&lt;/div&gt;</SPAN></SPAN></CODE>
<CODE CLASS="western"><SPAN STYLE="background: transparent">      </SPAN></CODE><CODE CLASS="western"><SPAN STYLE="font-weight: normal"><SPAN STYLE="background: transparent">))}</SPAN></SPAN></CODE>
<CODE CLASS="western"><SPAN STYLE="background: transparent">    </SPAN></CODE><CODE CLASS="western"><SPAN STYLE="font-weight: normal"><SPAN STYLE="background: transparent">&lt;/&gt;</SPAN></SPAN></CODE>

<A NAME="__DdeLink__9_1275113991"></A><CODE CLASS="western"><B>useCallback</B></CODE><CODE CLASS="western">  </CODE>
<CODE CLASS="western">when sending a function in prop, every time a component re renders, its functions do also and in turn the component itself </CODE>
<CODE CLASS="western">memo would not be able to stop this , so we need some way to stop the function of that component to render </CODE>
<CODE CLASS="western"><SPAN STYLE="font-weight: normal"><SPAN STYLE="background: transparent">&lt;Todos todos={todos} addTodo={addTodo} /&gt;      - the case is that addTodo is a function</SPAN></SPAN></CODE>

<A NAME="__DdeLink__7_1275113991"></A><CODE CLASS="western"><SPAN STYLE="font-weight: normal"><SPAN STYLE="background: transparent">const addTodo = () =&gt; {</SPAN></SPAN></CODE><CODE CLASS="western"> setTodos((t) =&gt; [...t, &quot;New Todo&quot;]);  };  - example of none isolated function that would trigger render</CODE>

<CODE CLASS="western">const addTodo = </CODE><CODE CLASS="western"><B>useCallback</B></CODE><CODE CLASS="western">(() =&gt; {    setTodos((t) =&gt; [...t, &quot;New Todo&quot;]);  }, [todos]);  </CODE><CODE CLASS="western"><SPAN STYLE="font-weight: normal"><SPAN STYLE="background: transparent">- example of isolated function </SPAN></SPAN></CODE>

<A NAME="__DdeLink__13_1275113991"></A><CODE CLASS="western"><B>useMemo</B></CODE>
<CODE CLASS="western"><SPAN STYLE="font-weight: normal">isolates functions of re rendering </SPAN></CODE>
<CODE CLASS="western"><SPAN STYLE="font-weight: normal">const [coun</SPAN></CODE><CODE CLASS="western"><SPAN STYLE="font-weight: normal"><SPAN STYLE="background: transparent">t, se</SPAN></SPAN></CODE><CODE CLASS="western"><SPAN STYLE="font-weight: normal">tCount] = useState(0);              - useState</SPAN></CODE>

<A NAME="__DdeLink__11_1275113991"></A><CODE CLASS="western"><SPAN STYLE="font-weight: normal">const calc</SPAN></CODE><CODE CLASS="western"><SPAN STYLE="font-weight: normal"><SPAN STYLE="background: transparent">ulati</SPAN></SPAN></CODE><CODE CLASS="western"><SPAN STYLE="font-weight: normal">on = func(count);    - func needs to render every time count is changed, but in case of multi useState will render needlessly </SPAN></CODE>

<CODE CLASS="western"><SPAN STYLE="font-weight: normal">const calcula</SPAN></CODE><CODE CLASS="western"><SPAN STYLE="font-weight: normal"><SPAN STYLE="background: transparent">tion = </SPAN></SPAN></CODE><CODE CLASS="western"><B>useMemo</B></CODE><CODE CLASS="western"><SPAN STYLE="font-weight: normal">(() =&gt; func(count), [count]);  - the useMemo render the func only when [count] is changed</SPAN></CODE>

<CODE CLASS="western"><B>useFetch</B></CODE>



<CODE CLASS="western">return () =&gt; clearTimeout(timer)</CODE>

<CODE CLASS="western">     </CODE><CODE CLASS="western">key in array of dom elements , react allows to set key per each element </CODE>
<CODE CLASS="western"><FONT COLOR="#080808"><FONT FACE="Consolas, monospace"><FONT SIZE=2><SPAN LANG="en-US">{cars.map((car) =&gt; &lt;Car key={car.id} brand={car.brand} /&gt;)}</SPAN></FONT></FONT></FONT></CODE>

<CODE CLASS="western"><FONT COLOR="#080808"><FONT SIZE=2><SPAN LANG="en-US">export default memo(Todos);   </SPAN></FONT></FONT></CODE><CODE CLASS="western">Using memo will cause React to skip rendering a component if its props have not changed </CODE>




</PRE><P STYLE="margin-left: 1.16cm">
<BR><BR>
</P>
<P STYLE="margin-left: 1.16cm"><FONT COLOR="#080808"><FONT FACE="Consolas, monospace"><FONT SIZE=2>run
react directly on html files </FONT></FONT></FONT>
</P>
<PRE CLASS="western" STYLE="margin-left: 0.76cm; background: #dddddd"><FONT COLOR="#080808"><FONT FACE="Consolas, monospace"><FONT SIZE=2>&lt;html&gt;</FONT></FONT></FONT>
<FONT COLOR="#080808">  <FONT FACE="Consolas, monospace"><FONT SIZE=2><SPAN LANG="en-US">&lt;head&gt;</SPAN></FONT></FONT></FONT>
<FONT COLOR="#080808">    <FONT FACE="Consolas, monospace"><FONT SIZE=2><SPAN LANG="en-US">&lt;script src=&quot;https://unpkg.com/react@18/umd/react.development.js&quot; crossorigin&gt;&lt;/script&gt;</SPAN></FONT></FONT></FONT>
<FONT COLOR="#080808">    <FONT FACE="Consolas, monospace"><FONT SIZE=2><SPAN LANG="en-US">&lt;script src=&quot;https://unpkg.com/react-dom@18/umd/react-dom.development.js&quot; crossorigin&gt;&lt;/script&gt;</SPAN></FONT></FONT></FONT>
<FONT COLOR="#080808">    <FONT FACE="Consolas, monospace"><FONT SIZE=2><SPAN LANG="en-US">&lt;script src=&quot;https://unpkg.com/@babel/standalone/babel.min.js&quot;&gt;&lt;/script&gt;</SPAN></FONT></FONT></FONT>
<FONT COLOR="#080808">  <FONT FACE="Consolas, monospace"><FONT SIZE=2><SPAN LANG="en-US">&lt;/head&gt;</SPAN></FONT></FONT></FONT>
<FONT COLOR="#080808">  <FONT FACE="Consolas, monospace"><FONT SIZE=2><SPAN LANG="en-US">&lt;body&gt;</SPAN></FONT></FONT></FONT>

<FONT COLOR="#080808">    <FONT FACE="Consolas, monospace"><FONT SIZE=2><SPAN LANG="en-US">&lt;div id=&quot;mydiv&quot;&gt;&lt;/div&gt;</SPAN></FONT></FONT></FONT>

<FONT COLOR="#080808">    <FONT FACE="Consolas, monospace"><FONT SIZE=2><SPAN LANG="en-US">&lt;script type=&quot;text/babel&quot;&gt;</SPAN></FONT></FONT></FONT>
<FONT COLOR="#080808">      <FONT FACE="Consolas, monospace"><FONT SIZE=2><SPAN LANG="en-US">function Hello() {</SPAN></FONT></FONT></FONT>
<FONT COLOR="#080808">        <FONT FACE="Consolas, monospace"><FONT SIZE=2><SPAN LANG="en-US">return &lt;h1&gt;Hello World!&lt;/h1&gt;;</SPAN></FONT></FONT></FONT>
<FONT COLOR="#080808">      <FONT FACE="Consolas, monospace"><FONT SIZE=2><SPAN LANG="en-US">}</SPAN></FONT></FONT></FONT>
<FONT COLOR="#080808">      </FONT>
<FONT COLOR="#080808">      <FONT FACE="Consolas, monospace"><FONT SIZE=2><SPAN LANG="en-US">ReactDOM.render(&lt;Hello /&gt;, document.getElementById('mydiv'))</SPAN></FONT></FONT></FONT>
<FONT COLOR="#080808">    <FONT FACE="Consolas, monospace"><FONT SIZE=2><SPAN LANG="en-US">&lt;/script&gt;</SPAN></FONT></FONT></FONT>

<FONT COLOR="#080808">  <FONT FACE="Consolas, monospace"><FONT SIZE=2><SPAN LANG="en-US">&lt;/body&gt;</SPAN></FONT></FONT></FONT>
<FONT COLOR="#080808"><FONT FACE="Consolas, monospace"><FONT SIZE=2><SPAN LANG="en-US">&lt;/html&gt;</SPAN></FONT></FONT></FONT></PRE>
</BODY>
</HTML>