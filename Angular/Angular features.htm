<p><u>Module </u></p>

<p style="margin-left: 40px;">holds lists of</p>

<p style="margin-left: 80px;">declarations :&nbsp;&nbsp; components under this module<br />
imports :&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; libs and modules to be used<br />
providers:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; services to be used by components<br />
bootstrap:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; holds the parent component</p>

<p><u>Routing </u></p>

<p style="margin-left: 40px;">the routing is called by the module in imports as such :<span style="color:#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; RouterModule</span>.<em style="color:#00627a; font-style:italic">forChild</em>(<span style="color:#248f8f">routes</span>),</p>

<p style="margin-left: 40px;">const routes: Routes =&nbsp; [<br />
&nbsp; { path:&nbsp; &#39;graph&#39; ,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; component: GraphComponent },<br />
&nbsp; { path:&nbsp; &#39;url-get/:name&#39; , component: UrlGetComponent }<br />
]<br />
can add lasy load for modules , if route is used will load the additional module:</p>

<p style="margin-left: 40px;">const routes: Routes =&nbsp; [<br />
&nbsp; { path:&nbsp; &#39;graph&#39; , component: GraphComponent , <span style="color:#7a7a43">loadChildren</span>: () =&gt; <span style="color:#0033b3">import</span>(<span style="color:#067d17">&#39;./work.module&#39;</span>).<span style="color:#7a7a43">then</span>(m =&gt; m.<span style="color:#000000">SubNetworkModule</span>)},<br />
&nbsp; { path:&nbsp; &#39;url-get/:name&#39; , component: UrlGetComponent , <span style="color:#7a7a43">loadChildren</span>: () =&gt; <span style="color:#0033b3">import</span>(<span style="color:#067d17">&#39;./sub.module&#39;</span>).<span style="color:#7a7a43">then</span>(m =&gt; m.<span style="color:#000000">SubModule</span>)},<br />
]</p>

<p style="margin-left: 40px;">can jump to routes from</p>

<p style="margin-left: 40px;">by html<br />
&lt;<span style="color:#0033b3">a </span><span style="color:#871094">[routerLink]</span><span style="color:#067d17">=&#39;</span><span style="background-color:#f7faff; color:#067d17">&quot;../route-pos&quot;</span><span style="color:#067d17">&#39; </span><span style="color:#871094">[fragment]</span><span style="color:#067d17">=&quot;</span><span style="background-color:#f7faff; color:#067d17">&#39;part1&#39;</span><span style="color:#067d17">&quot;</span>&gt;fragment 1&lt;/<span style="color:#0033b3">a</span>&gt;<br />
&nbsp;</p>

<p style="margin-left: 40px;">by ts file</p>

<pre style="background-color: rgb(255, 255, 255); color: rgb(8, 8, 8); font-family: &quot;Consolas&quot;, monospace; font-size: 10.5pt; margin-left: 40px;">
<span style="color:#0033b3">constructor</span>(<span style="color:#0033b3">private </span><span style="color:#871094">route</span>: <span style="color:#000000">ActivatedRoute</span>, <span style="color:#0033b3">private </span><span style="color:#871094">router</span>: <span style="color:#000000">Router</span>)
</pre>

<pre style="background-color: rgb(255, 255, 255); color: rgb(8, 8, 8); font-family: &quot;Consolas&quot;, monospace; font-size: 10.5pt; margin-left: 40px;">
 <span style="color:#0033b3">this</span>.<span style="color:#871094">router</span>.<span style="color:#7a7a43">navigate</span>([<span style="color:#067d17">&#39;/Route/route&#39;</span>], { <span style="color:#871094">queryParams</span>: { <span style="color:#871094">link</span>: <span style="color:#1750eb">4 </span>},  <span style="color:#871094">queryParamsHandling</span>: <span style="color:#067d17">&#39;preserve&#39;</span>});
</pre>

<pre style="background-color: rgb(255, 255, 255); color: rgb(8, 8, 8); font-family: &quot;Consolas&quot;, monospace; font-size: 10.5pt; margin-left: 40px;">
<span style="color:#0033b3">this</span>.route.<span style="color:#871094">snapshot</span>.<span style="color:#871094">paramMap</span>.<span style="color:#7a7a43">get</span>(<span style="color:#067d17">&#39;id&#39;</span>); - THIS WILL RETURN THE DATA SENT WITH THE URL</pre>

<p><u>Bind</u></p>

<p>&nbsp;</p>

<p><u>onPush strategy </u></p>

<p style="margin-left: 40px;">each change to a component results with the whole component being rednered<br />
with the onPush stratigy , the component will only render on the following<br />
@<span class="pl-smi">Component</span><span class="pl-kos">({</span><br />
<span class="pl-c1">changeDetection</span>: <span class="pl-smi">ChangeDetectionStrategy</span><span class="pl-kos">.</span><span class="pl-c1">OnPush</span><span class="pl-kos">,</span></p>

<p style="margin-left: 40px;">with this strategy we will trigger on with the following</p>

<ul>
	<li>
	<p style="margin-left: 40px;">The input reference changed</p>
	</li>
	<li>
	<p style="margin-left: 40px;">An event from the component or one of its children.</p>
	</li>
	<li>
	<p style="margin-left: 40px;">Async pipe linked to the template emits a new value.</p>
	</li>
</ul>

<p style="margin-left: 40px;">can manually set the component rendered with this service</p>

<pre style="background-color: rgb(255, 255, 255); color: rgb(8, 8, 8); font-family: &quot;Consolas&quot;, monospace; font-size: 10.5pt; margin-left: 40px;">
<span style="color:#0033b3">constructor</span>(<span style="color:#0033b3">private </span><span style="color:#871094">cd</span>: <span style="color:#000000">ChangeDetectorRef</span>) { }</pre>

<pre style="background-color: rgb(255, 255, 255); color: rgb(8, 8, 8); font-family: &quot;Consolas&quot;, monospace; font-size: 10.5pt; margin-left: 40px;">
<span style="color:#0033b3">this</span>.<span style="color:#871094">cd</span>.<span style="color:#7a7a43">markForCheck</span>();</pre>

<p><u>Storage</u></p>

<p style="margin-left: 40px;">locale storage ,5M, data kept localy<br />
<span style="color:#0033b3">constructor</span>( <span style="color:#0033b3">private </span><span style="color:#871094">localStorage</span>: <span style="color:#000000">LocalStorage</span>) { }<br />
<span style="color:#0033b3">this</span>.<span style="color:#871094">localStorage</span>.<span style="color:#7a7a43">setItem</span>(<span style="color:#0033b3">[key]</span>, <span style="color:#0033b3">[json value]</span>)<br />
<span style="color:#0033b3">this</span>.<span style="color:#871094">localStorage</span>.<span style="color:#7a7a43">getItem</span>(<span style="color:#0033b3">[key]</span>).<span style="color:#7a7a43">subscribe</span>([value] =&gt; { <span style="color:#0033b3">console.log</span>});</p>

<p style="margin-left: 40px;"><br />
Cookie, 4K , sent to server on every request, 20 coockies per domain<br />
<span style="color:#0033b3">constructor</span>(<span style="color:#0033b3">private </span><span style="color:#871094">Cookie</span>: <span style="color:#000000">CookieService</span>) { }<br />
<span style="color:#871094">Cookie</span>.<span style="color:#7a7a43">set</span>(<span style="color:#0033b3">[key]</span>, <span style="color:#830091">JSON</span>.<span style="color:#7a7a43">stringify</span>(<span style="color:#0033b3">[json value]</span>));<br />
<span style="color:#830091">JSON</span>.<span style="color:#7a7a43">parse</span>(<span style="color:#871094">Cookie</span>.<span style="color:#7a7a43">get</span>(<span style="color:#0033b3">this</span>.<span style="color:#871094">cookieName</span>))</p>

<p style="margin-left: 40px;">Session storage, 5M, data only available per window, per session<br />
<span style="color:#830091">window</span>.<span style="color:#871094">sessionStorage</span>.<span style="color:#7a7a43">setItem</span>(<span style="color:#0033b3">[key]</span>, <span style="color:#830091">JSON</span>.<span style="color:#7a7a43">stringify</span>(<span style="color:#0033b3">[json value]</span>)));<br />
<span style="color:#830091">JSON</span>.<span style="color:#7a7a43">parse</span>(<span style="color:#871094">Cookie</span>.<span style="color:#7a7a43">get</span>(<span style="color:#830091">window</span>.<span style="color:#871094">sessionStorage</span>.<span style="color:#7a7a43">getItem</span>(<span style="color:#0033b3">this</span>.<span style="color:#871094">sessionName</span>) || <span style="color:#067d17">&#39;{}&#39;</span>))</p>

<p>&nbsp;</p>
